from aiogram import types
from aiogram.dispatcher.filters import CommandStart
from bot_send.notify_admins import new_user_registration
from loader import dp
from utils.db_api import user_commands as commands
from utils.misc import rate_limit
from keyboards.inline import ikb_subsriber, ikb_menu
from aiogram.types import CallbackQuery

@rate_limit(limit=3)
@dp.message_handler(CommandStart())  # —Å–æ–∑–¥–∞–µ–º message, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É /start
async def command_start(message: types.Message):
    args = message.get_args()  # –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç /start 1233124 —Å –∞–π–¥–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
    new_args = await commands.check_args(args, message.from_user.id)

    try:
        user = await commands.select_user(message.from_user.id)
        if user.status == 'active':
            await message.answer('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!')
        elif user.status == 'buned':
            await message.answer('–¢—ã –∑–∞–±–∞–Ω–µ–Ω')
    except Exception:
        await commands.add_user(user_id=message.from_user.id,
                                first_name=message.from_user.first_name,
                                last_name=message.from_user.last_name,
                                username=message.from_user.username,
                                status='active',
                                balance=0,
                                bill_id='')

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await new_user_registration(dp=dp, user_id=message.from_user.id, first_name=message.from_user.first_name,
                                    username=message.from_user.username)

        await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!üòú\n'
                             f'–≠—Ç–æ—Ç –±–æ—Ç –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–æ–≤–æ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–∞–º–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª—é–¥–µ–πü§Ø\n'
                             f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, '
                             f'–≤ –Ω–µ–º –±—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞\n'
                             f'–ü–æ—Å–ª–µ —á–µ–≥–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—É /voices',
                             reply_markup=ikb_subsriber)


@rate_limit(limit=3)
@dp.message_handler(text="/profile")  # —Å–æ–∑–¥–∞–µ–º message, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É /profile
async def get_unban(message: types.Message):  # —Å–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    user = await commands.select_user(message.from_user.id)
    await message.answer(f'id - {user.user_id}\n'
                         f'first_name: {user.first_name}\n'
                         f'last_name: {user.last_name}\n'
                         f'username: {user.username}\n'
                         f'status: {user.status}')
