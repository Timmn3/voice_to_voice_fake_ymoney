from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery
from filters.by_balance import PositiveBalance
from filters import IsSubsriber
from keyboards.inline import ikb_menu
from loader import dp
import os

from states import Audio

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–æ –∑–≤—É–∫–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
SOUNDS_FOLDER = 'examples of sounds'


# –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ menu, —Ç–æ –≤—ã–≤–æ–¥–∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message_handler(IsSubsriber(), Command('voices'))
async def menu(message: types.Message):
    await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–ºüéâ'
                         '–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª—é–¥–µ–πüòé'
                         '–¢–≤–æ—Ä–∏—Ç–µ!', reply_markup=ikb_menu)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
async def send_audio_file(call: CallbackQuery, audio_name):
    audio_path = os.path.join(SOUNDS_FOLDER, audio_name)
    if os.path.exists(audio_path):
        name = audio_name.replace(".wav", "")
        # –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é name –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSMContext
        await Audio.voice.set()
        await dp.storage.update_data(user=call.from_user.id,
                                     data={"name": name})  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é name –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        with open(audio_path, 'rb') as audio_file:
            await dp.bot.send_audio(call.message.chat.id, audio=audio_file, title=f'–ü—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞: {name}üîä\n',
                                    caption=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª–∏–Ω–æ–π –¥–æ 30 —Å–µ–∫—É–Ω–¥ (*.mp3 –∏–ª–∏ *.wav) '
                                            f'–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "–æ—Ç–º–µ–Ω–∞"')
        # await call.message.answer('–∫–∏–¥–∞–π —Ñ–∞–π–ª')
    else:
        await call.message.answer(f'–§–∞–π–ª —Å –∞—É–¥–∏–æ {audio_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.')


def create_audio_handler(text, audio_file):
    @dp.callback_query_handler(PositiveBalance(), IsSubsriber(), text=text)
    async def send_message(call: CallbackQuery):
        await send_audio_file(call, audio_file)


create_audio_handler("–ú–æ—Ä–∏–∞—Ä—Ç–∏", "–ú–æ—Ä–∏–∞—Ä—Ç–∏.wav")
create_audio_handler("–ú–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω", "–ú–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω.wav")
create_audio_handler("–ù–æ–ª–∏–∫", "–ù–æ–ª–∏–∫.wav")
create_audio_handler("–ò–≤–∞–Ω–∑–æ–ª–æ", "–ò–≤–∞–Ω–∑–æ–ª–æ.wav")
create_audio_handler("–ï–≤–∞ –≠–ª—Ñ–∏", "–ï–≤–∞ –≠–ª—Ñ–∏.wav")
create_audio_handler("Kussia", "Kussia.wav")
