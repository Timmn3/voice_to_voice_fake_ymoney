from aiogram import types

from keyboards.inline import ikb_menu
from loader import dp
from io import BytesIO
from aiogram.dispatcher import FSMContext
from loguru import logger
import os
from states import Audio
from utils.db_api.user_commands import change_balance
from utils.misc.audio_duration import get_duration_mp3, get_duration_wav

allowed_extensions = {types.ContentType.AUDIO: '.mp3', types.ContentType.DOCUMENT: '.wav'}
text = ('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mp3 –∏–ª–∏ .wav\n'
        '–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å mp3 —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –¥–∏–∫—Ç–æ—Ñ–æ–Ω —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º, –∞ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª')


@dp.message_handler(state=Audio.voice, content_types=[types.ContentType.DOCUMENT, types.ContentType.AUDIO,
                                                      types.ContentType.TEXT])
async def handle_audio_message(message: types.Message, state: FSMContext):
    try:
        content = message.content_type
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è - "–æ—Ç–º–µ–Ω–∞"
        if content == types.ContentType.TEXT:
            if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
                await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')
                await state.finish()
                return
            else:
                await message.answer(text)
                return

        user_data = await dp.storage.get_data(user=message.from_user.id)
        voice_name = f'–ì–æ–ª–æ—Å: {user_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")}'
        name = user_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        file_extension = None
        if content == types.ContentType.DOCUMENT:
            file_extension = os.path.splitext(message.document.file_name)[1]
        elif content == types.ContentType.AUDIO:
            file_extension = os.path.splitext(message.audio.file_name)[1]

        if file_extension not in allowed_extensions.values(): # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            await message.reply(text)
            await state.finish()
            return

        audio = BytesIO()
        length_audio = 0
        if content == types.ContentType.DOCUMENT:
            audio.name = message.document.file_name
            await message.document.download(destination_file=audio)
            length_audio = await get_duration_wav(audio)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ wav
        elif content == types.ContentType.AUDIO:
            audio.name = message.audio.file_name
            await message.audio.download(destination_file=audio)
            length_audio = await get_duration_mp3(audio)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ mp3

        if length_audio > 30:
            await message.answer('–î–ª–∏–Ω–Ω–∞ —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ'
                                 ' "–æ—Ç–º–µ–Ω–∞"')
            return
        else:
            await message.answer('–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—éüòÅ')
            await change_balance(message.chat.id, -1)  # —Å–Ω–∏–º–∞–µ–º –±–∞–ª–∞–Ω—Å
            await save_voice(name, audio, message)
            await state.finish()

    except Exception as e:
        logger.exception(f'–û—à–∏–±–∫–∞ wait_voice: {e}')
        await state.finish()


async def save_voice(name, audio, message):
    try:
        content = message.content_type
        # await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ...')
        user_id = str(message.chat.id)
        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å audio –≤ –∫–æ–Ω–µ–≤—É—é –ø–∞–ø–∫—É in –≤ —Ñ–æ—Ä–º–∞—Ç–µ: name_audio.name_user_id
        file_name = f'{name}_{user_id}_{audio.name}'
        if content == types.ContentType.DOCUMENT:
            await message.document.download(destination_file=f'in/{file_name}')
        elif content == types.ContentType.AUDIO:
            await message.audio.download(destination_file=f'in/{file_name}')

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ save_voice: {e}')


@dp.message_handler(content_types=[types.ContentType.DOCUMENT, types.ContentType.AUDIO])
async def wait_audio(message: types.Message):
    """ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª, –Ω–µ –≤—ã–±—Ä–∞–≤ –∑–≤—É–∫–æ–≤—É—é """
    await message.answer('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–æ–ª–æ—Å–∞', reply_markup=ikb_menu)
